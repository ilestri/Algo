import{n as d}from"./utils-CowMPuqP.js";import{p as u}from"./steps-C4T7tiBa.js";class p{arr=[];head=0;enqueue(i){this.arr.push(i)}dequeue(){if(this.head>=this.arr.length)return;const i=this.arr[this.head];return this.head++,this.head>50&&this.head*2>this.arr.length&&(this.arr=this.arr.slice(this.head),this.head=0),i}get length(){return this.arr.length-this.head}}function v(h){const{n:i,adj:o,start:a}=h,n=Array(i).fill(!1),s=new p,e=[];for(s.enqueue(a),u(e,"enqueue",{v:a},[1],`시작 정점 ${a} 큐에 삽입`),n[a]=!0;s.length;){u(e,"compare",{size:s.length},[2],`큐 크기 ${s.length}`);const t=s.dequeue();u(e,"dequeue",{v:t},[3],`정점 ${t} 큐에서 제거`),u(e,"visit",{v:t},[3],`정점 ${t} 방문`);for(const{v:r}of o[t]||[])u(e,"compare",{u:t,v:r},[4],`간선 ${t}→${r} 확인`),n[r]||(n[r]=!0,s.enqueue(r),u(e,"enqueue",{v:r},[5],`정점 ${r} 큐에 삽입`))}return e}const f={id:"graph/bfs",category:"graph",title:"너비 우선 탐색 (BFS)",pseudocode:["enqueue(s)","while Q not empty:","  u ← dequeue()","  for v in adj[u]:","    if not visited[v]: enqueue(v)"],complexity:{best:"O(V+E)",average:"O(V+E)",worst:"O(V+E)",space:"O(V)"},defaultInput:{n:5,adj:{0:[{v:1},{v:2}],1:[{v:3}],2:[{v:4}]},start:0},normalizeInput:d};export{f as descriptor,v as stepsOf};
